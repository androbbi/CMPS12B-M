head	1.17;
access;
symbols;
locks;
comment	@# @;


1.17
date	2014.02.04.23.27.16;	author -;	state -;
branches;
next	1.16;

1.16
date	2014.02.04.09.01.06;	author -;	state -;
branches;
next	1.15;

1.15
date	2014.02.04.08.49.45;	author -;	state -;
branches;
next	1.14;

1.14
date	2014.02.04.08.49.21;	author -;	state -;
branches;
next	1.13;

1.13
date	2014.02.04.08.47.16;	author -;	state -;
branches;
next	1.12;

1.12
date	2014.02.04.08.44.32;	author -;	state -;
branches;
next	1.11;

1.11
date	2014.02.04.08.41.43;	author -;	state -;
branches;
next	1.10;

1.10
date	2014.02.04.08.38.35;	author -;	state -;
branches;
next	1.9;

1.9
date	2014.02.04.08.37.57;	author -;	state -;
branches;
next	1.8;

1.8
date	2014.02.04.08.36.14;	author -;	state -;
branches;
next	1.7;

1.7
date	2014.02.04.08.31.00;	author -;	state -;
branches;
next	1.6;

1.6
date	2014.02.04.08.30.38;	author -;	state -;
branches;
next	1.5;

1.5
date	2014.02.04.08.21.41;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.02.04.08.14.24;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.02.04.08.13.45;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.02.04.05.47.42;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.02.04.05.44.21;	author -;	state -;
branches;
next	;


desc
@@


1.17
log
@-
@
text
@// $Id: commands.java,v 1.7 2014-01-17 17:57:56-08 - - $

import static java.lang.System.*;

class commands {
   static int lineLength = 65;
   static int topMargin = 6;
   static int currPage = 1;
   static int pageOffSet = 10;
   static int indent = 0;
   static int pageLength = 60;
   static int spaces = 1;
   static boolean printNum = true;
   
   private static void command_00 (String[] words) {
      // Executing a comment does nothing.
   }

   private static void command_bp (String[] words,
               linkedqueue<String> queue) {
      for(int i = 0; i < topMargin; i++){
         out.print("\n");
         if((i >= topMargin/2-1) && printNum == true){
            for(int j = 0; j < lineLength + pageOffSet; j++){
               out.print(" ");
            }
            out.print(currPage);
            printNum = false;
         }
      }
      printNum = true;
      currPage++;
      out.print("\n");
      command_br(words, queue);
   }

   private static void command_br (String[] words,
               linkedqueue<String> queue) {
      auxlib.printparagraph(queue, lineLength - pageOffSet - indent);
      command_sp(words, spaces);
   }

   private static void command_cc (String[] words) {

   }

   private static void command_in (String[] words, int ind) {
      indent = ind;
   }

   private static void command_ll (String[] words, int length) {
      lineLength = length;
   }

   private static void command_mt (String[] words, int top) {
      topMargin = top;
   }

   private static void command_pl (String[] words, int pLength) {
      pageLength = pLength;
   }

   static String command_po (String[] words, int pageOff) {
      pageOffSet = pageOff;
      String off = "";
      for(int i = 0; i < pageOffSet + indent; i++){
          off+=" ";
      }
      return off;
   }

   private static void command_sp (String[] words, int space) {
      for(int i = 0; i < spaces; i++){
         out.print("\n");
      }
      spaces = space;
   }

   public static void do_command (String[] words,
            linkedqueue<String> queue, int num) {
      switch (words[0]) {
      case ".\\\"": command_00 (words); break;
      case ".bp"  : command_bp (words, queue); break;
      case ".br"  : command_br (words, queue); break;
      case ".cc"  : command_cc (words); break;
      case ".in"  : command_in (words, num); break;
      case ".ll"  : command_ll (words, num); break;
      case ".mt"  : command_mt (words, num); break;
      case ".pl"  : command_pl (words, num); break;
      case ".po"  : command_po (words, num); break;
      case ".sp"  : command_sp (words, num); break;
      default     : throw new IllegalArgumentException (words[0]);
      }
   }

}
@


1.16
log
@-
@
text
@a2 1
//import java.util.HashMap;
d4 1
d6 10
a15 14
      static int currLine = 0;
      static int lineLength = 20;
	  static int pageLength = 60;
	  static int pageNumber = 1;
	  static int pageOffset = 10;
	  static int indent = 0;
	  static int topMargin = 6;
	  static String control = "a";
	  static boolean newPage = true;
	  static boolean blankLine = false;
	  static boolean printPage = true;
	  static int endLines = 1;

   private static void command_00 (String[] read, linkedqueue<String> queue) {
d19 10
a28 17
   private static void command_bp (String[] read, linkedqueue<String> queue) {
      if(newPage == true) {
	     for(int i = 0; i < topMargin; i ++){
	        out.print("\n");
		    if(i >= topMargin/2 || topMargin == 1){
		       for(int j = 0; j < lineLength + pageOffset; j++){
			      out.print(" ");
			   }
		       if(printPage == true) {
			      out.print(pageNumber);
				  printPage = false;
			   }
		    }
	     }
		 if(topMargin > 0) {
		    out.print("\n");
			currLine++;
a29 1
		 printPage = true;
d31 4
a34 3
      newPage = false;
	  command_br(read, queue);
	  blankLine = true;
d37 4
a40 5
   private static void command_br (String[] read, linkedqueue<String> queue) {
      for(int j = 0; j < pageOffset + indent; j++){
	     out.print(" ");
	  }
      auxlib.printparagraph(queue, lineLength);
d43 2
a44 2
   private static void command_cc (String[] read, linkedqueue<String> queue, String cont) {
      control = cont;
d47 1
a47 1
   static void command_in (String[] read, linkedqueue<String> queue, int ind) {
d51 1
a51 1
   private static void command_ll (String[] read, linkedqueue<String> queue, int length) {
d55 1
a55 1
   private static void command_mt (String[] read, linkedqueue<String> queue, int top) {
d59 2
a60 2
   private static void command_pl (String[] read, linkedqueue<String> queue) {

d63 7
a69 2
   static void command_po (String[] read, linkedqueue<String> queue, int off) {
      pageOffset = off;
d72 3
a74 4
   static void command_sp (String[] read, linkedqueue<String> queue, int space) {
      endLines = space;
	  for(int i = 0; i < endLines; i++) {
	     out.print("\n");
d76 1
d78 15
a92 13
   public static void do_command (String[] read, linkedqueue<String> queue, int num, String con) {
      switch (read[0]) {
         case con  + "\\\"": command_00 (read, queue); break;
         case con  + "bp"  : command_bp (read, queue); break;
         case con  + "br"  : command_br (read, queue); break;
         case con  + "cc"  : command_cc (read, queue, con); break;
         case con  + "in"  : command_in (read, queue, num); break;
         case con  + "ll"  : command_ll (read, queue, num); break;
         case con  + "mt"  : command_mt (read, queue, num); break;
         case con  + "pl"  : command_pl (read, queue); break;
         case con  + "po"  : command_po (read, queue, num); break;
         case con + "sp"   : command_sp (read, queue, num); break;
         default     : throw new IllegalArgumentException (read[0]);
a96 1

@


1.15
log
@-
@
text
@d87 10
a96 10
         case (con , "\\\"");: command_00 (read, queue); break;
         case (con , "bp");  : command_bp (read, queue); break;
         case (con , "br");  : command_br (read, queue); break;
         case (con , "cc");  : command_cc (read, queue, con); break;
         case (con , "in");  : command_in (read, queue, num); break;
         case (con , "ll");  : command_ll (read, queue, num); break;
         case (con , "mt");  : command_mt (read, queue, num); break;
         case (con , "pl");  : command_pl (read, queue); break;
         case (con , "po");  : command_po (read, queue, num); break;
         case (con , "sp");  : command_sp (read, queue, num); break;
@


1.14
log
@-
@
text
@d87 10
a96 10
         case (con , "\\\""): command_00 (read, queue); break;
         case (con , "bp")  : command_bp (read, queue); break;
         case (con , "br")  : command_br (read, queue); break;
         case (con , "cc")  : command_cc (read, queue, con); break;
         case (con , "in")  : command_in (read, queue, num); break;
         case (con , "ll")  : command_ll (read, queue, num); break;
         case (con , "mt")  : command_mt (read, queue, num); break;
         case (con , "pl")  : command_pl (read, queue); break;
         case (con , "po")  : command_po (read, queue, num); break;
         case (con , "sp")  : command_sp (read, queue, num); break;
@


1.13
log
@-
@
text
@d87 10
a96 10
         case (con + "\\\""): command_00 (read, queue); break;
         case (con + "bp")  : command_bp (read, queue); break;
         case (con + "br")  : command_br (read, queue); break;
         case (con + "cc")  : command_cc (read, queue, con); break;
         case (con + "in")  : command_in (read, queue, num); break;
         case (con + "ll")  : command_ll (read, queue, num); break;
         case (con + "mt")  : command_mt (read, queue, num); break;
         case (con + "pl")  : command_pl (read, queue); break;
         case (con + "po")  : command_po (read, queue, num); break;
         case (con + "sp")  : command_sp (read, queue, num); break;
@


1.12
log
@-
@
text
@d87 10
a96 10
         case "con" + "\\\"": command_00 (read, queue); break;
         case "con" + "bp"  : command_bp (read, queue); break;
         case "con" + "br"  : command_br (read, queue); break;
         case "con" + "cc"  : command_cc (read, queue, con); break;
         case "con" + "in"  : command_in (read, queue, num); break;
         case "con" + "ll"  : command_ll (read, queue, num); break;
         case "con" + "mt"  : command_mt (read, queue, num); break;
         case "con" + "pl"  : command_pl (read, queue); break;
         case "con" + "po"  : command_po (read, queue, num); break;
         case "con" + "sp"  : command_sp (read, queue, num); break;
@


1.11
log
@-
@
text
@d87 10
a96 10
         case con + "\\\": command_00 (read, queue); break;
         case con + "bp"  : command_bp (read, queue); break;
         case con + "br"  : command_br (read, queue); break;
         case con + "cc"  : command_cc (read, queue, con); break;
         case con + "in"  : command_in (read, queue, num); break;
         case con + "ll"  : command_ll (read, queue, num); break;
         case con + "mt"  : command_mt (read, queue, num); break;
         case con + "pl"  : command_pl (read, queue); break;
         case con + "po"  : command_po (read, queue, num); break;
         case con + "sp"  : command_sp (read, queue, num); break;
@


1.10
log
@-
@
text
@d87 1
a87 1
         case con + "\\\"": command_00 (read, queue); break;
@


1.9
log
@-
@
text
@d87 10
a96 10
         case con "\\\"": command_00 (read, queue); break;
         case con "bp"  : command_bp (read, queue); break;
         case con "br"  : command_br (read, queue); break;
         case con "cc"  : command_cc (read, queue, con); break;
         case con "in"  : command_in (read, queue, num); break;
         case con "ll"  : command_ll (read, queue, num); break;
         case con "mt"  : command_mt (read, queue, num); break;
         case con "pl"  : command_pl (read, queue); break;
         case con "po"  : command_po (read, queue, num); break;
         case con "sp"  : command_sp (read, queue, num); break;
@


1.8
log
@-
@
text
@d87 10
a96 10
         case "con\\\"": command_00 (read, queue); break;
         case "conbp"  : command_bp (read, queue); break;
         case "conbr"  : command_br (read, queue); break;
         case "concc"  : command_cc (read, queue, con); break;
         case "conin"  : command_in (read, queue, num); break;
         case "conll"  : command_ll (read, queue, num); break;
         case "conmt"  : command_mt (read, queue, num); break;
         case "conpl"  : command_pl (read, queue); break;
         case "conpo"  : command_po (read, queue, num); break;
         case "consp"  : command_sp (read, queue, num); break;
@


1.7
log
@-
@
text
@d87 10
a96 10
         case ".\\\"": command_00 (read, queue); break;
         case ".bp"  : command_bp (read, queue); break;
         case ".br"  : command_br (read, queue); break;
         case ".cc"  : command_cc (read, queue, con); break;
         case ".in"  : command_in (read, queue, num); break;
         case ".ll"  : command_ll (read, queue, num); break;
         case ".mt"  : command_mt (read, queue, num); break;
         case ".pl"  : command_pl (read, queue); break;
         case ".po"  : command_po (read, queue, num); break;
         case ".sp"  : command_sp (read, queue, num); break;
@


1.6
log
@-
@
text
@d13 1
a13 1
	  static String control = ".";
@


1.5
log
@-
@
text
@d13 1
a13 1
	  static String control = "p";
@


1.4
log
@-
@
text
@d13 1
a13 1
	  static String control = ".";
@


1.3
log
@-
@
text
@d13 1
a13 1
	  static String control = .";
@


1.2
log
@-
@
text
@d6 1
d13 1
d39 1
d55 2
a56 2
   private static void command_cc (String[] read, linkedqueue<String> queue) {

d85 1
a85 1
   public static void do_command (String[] read, linkedqueue<String> queue, int num) {
d90 1
a90 1
         case ".cc"  : command_cc (read, queue); break;
@


1.1
log
@-
@
text
@d24 1
a24 1
	        out.print("%n");
d36 1
a36 1
		    out.print("%n");
d79 1
a79 1
	     out.print("%n");
@
