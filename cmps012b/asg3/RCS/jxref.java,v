head	1.18;
access;
symbols;
locks;
comment	@# @;


1.18
date	2014.02.19.03.08.42;	author -;	state -;
branches;
next	1.17;

1.17
date	2014.02.18.22.29.08;	author -;	state -;
branches;
next	1.16;

1.16
date	2014.02.18.21.03.54;	author -;	state -;
branches;
next	1.15;

1.15
date	2014.02.18.20.49.49;	author -;	state -;
branches;
next	1.14;

1.14
date	2014.02.17.00.00.49;	author -;	state -;
branches;
next	1.13;

1.13
date	2014.02.16.23.57.22;	author -;	state -;
branches;
next	1.12;

1.12
date	2014.02.16.23.50.53;	author -;	state -;
branches;
next	1.11;

1.11
date	2014.02.16.23.50.04;	author -;	state -;
branches;
next	1.10;

1.10
date	2014.02.16.23.49.42;	author -;	state -;
branches;
next	1.9;

1.9
date	2014.02.16.23.46.52;	author -;	state -;
branches;
next	1.8;

1.8
date	2014.02.16.23.46.41;	author -;	state -;
branches;
next	1.7;

1.7
date	2014.02.16.23.46.01;	author -;	state -;
branches;
next	1.6;

1.6
date	2014.02.16.23.45.09;	author -;	state -;
branches;
next	1.5;

1.5
date	2014.02.16.23.43.14;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.02.16.23.40.46;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.02.16.23.40.29;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.02.16.23.40.07;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.02.16.23.38.49;	author -;	state -;
branches;
next	;


desc
@@


1.18
log
@-
@
text
@// $Id: jxref.java,v 1.1 2014-01-16 17:44:47-08 - - $

import java.io.*;
import java.util.Scanner;

import static java.lang.System.*;

class jxref {
	static final String STDIN_NAME = "-";
	static boolean caseD = false;
	static boolean caseF = false;

	static class printer implements visitor <String, queue <Integer>> {
		public void visit (String key, queue <Integer> value) {
			out.printf ("%s", key);
			for (int linenr: value) out.printf (" %d", linenr);
			out.printf ("%n");
		}
	}

	static void xref_file (String filename, Scanner scan) {
		treemap <String, queue <Integer>> map = new treemap <String, queue <Integer>>();
		for (int linenr = 1; scan.hasNextLine (); ++linenr) {
			//splits the string if it is not a-z, A-Z, 0-9
			for (String word: scan.nextLine().split ("\\W+")) {
				queue <Integer> q = new queue <Integer>();
				q.insert(linenr);
				//if string matches any number it will ignore and not include or print
				if(caseF == true)
					word = word.toLowerCase();
				if (word.matches ("^\\d*$")) continue;
				map.put(word, q);
				//if(caseD == true)
					map.debug_dump();
			}
			break;
		}
		if(caseD != true){
			visitor <String, queue <Integer>> print_fn = new printer ();
			map.do_visit (print_fn);
		}
	}
	static void visit (String key, queue <Integer> value) {
		out.printf ("%s", key);
		for (int linenr: value) out.printf (" %d", linenr);
		out.printf ("%n");
	}

	public static void main (String[] args) {
		//when there is no file inputed, takes in stdin
		if (args.length == 0) {
			xref_file (STDIN_NAME, new Scanner (in));
		}else {
			if(args[0].startsWith(STDIN_NAME)){
				switch(args[0]){
				   case "-d" : caseD = true; break;
				   case "-f" : caseF = true; break;
				   case "-fd": caseD = true; caseF = true; break;
				   case "-df": caseD = true; caseF = true; break;
				   default: out.print("No such command"); break;
				}
			}
			for (int argi = 0; argi < args.length; ++argi) {
				//iterates each file into filename if starts with "-"
				String filename = args[argi];
				if (filename.equals (STDIN_NAME)) {
					xref_file (STDIN_NAME, new Scanner (in));
				}else {
					//file is inputed to xref_file without "-"
					try {
						Scanner scan = new Scanner (new File (filename));
						xref_file (filename, scan);
						scan.close ();
					}catch (IOException error) {
						auxlib.warn (error.getMessage());
						exit(1);
					}
				}
			}
		}
		auxlib.exit ();
	}

}@


1.17
log
@-
@
text
@d1 84
a84 72
// $Id: jxref.java,v 1.1 2014-01-16 17:44:47-08 - - $

import java.io.*;
import java.util.Scanner;
import static java.lang.System.*;

class jxref {
   static final String STDIN_NAME = "-";
   static boolean caseD = false;
   static boolean caseF = false;

   static class printer implements visitor <String, queue <Integer>> {
      public void visit (String key, queue <Integer> value) {
         out.printf ("%s %s", key, value);
         for (int linenr: value) out.printf (" %d", linenr);
         out.printf ("%n");
      }
   }

   static void xref_file (String filename, Scanner scan) {
      queue <Integer> q = new queue <Integer>();
      treemap <String, queue <Integer>> map =
            new treemap <String, queue <Integer>> ();
      for (int linenr = 1; scan.hasNextLine (); ++linenr) {
         for (String word: scan.nextLine().split ("\\W+")) {
		    q.insert(linenr);
		    if(caseF == true) word = word.toLowerCase();
            if (word.matches ("^\\d*$")) continue;
            out.printf ("%s: %d: %s%n", filename, linenr, word);
			map.put(word, q);
			map.debug_dump();
         }
      }
	  if(caseD != true){
         visitor <String, queue <Integer>> print_fn = new printer ();
         map.do_visit (print_fn);
	  }
   }

   public static void main (String[] args) {
      if (args.length == 0) {
         xref_file (STDIN_NAME, new Scanner (in));
      }else {
	     if(args[0].startsWith(STDIN_NAME)){
		    switch(args[0]) {
			   case "-d"  : caseD = true; break;
			   case "-f"  : caseF = true; break;
			   case "-df" : caseD = true; caseF = true; break;
			   case "-fd" : caseF = true; caseD = true; break;
			   default    : throw new IllegalArgumentException (args[0]);
            }
         }
         for (int argi = 0; argi < args.length; ++argi) {
            String filename = args[argi];
            if (filename.equals (STDIN_NAME)) {
               xref_file (STDIN_NAME, new Scanner (in));
            }else {
               try {
                  Scanner scan = new Scanner (new File (filename));
                  xref_file (filename, scan);
                  scan.close ();
               }catch (IOException error) {
                  auxlib.warn (error.getMessage ());
               }
            }
         }
      }
      auxlib.exit ();
   }

}

@


1.16
log
@-
@
text
@d34 4
a37 2
      visitor <String, queue <Integer>> print_fn = new printer ();
      map.do_visit (print_fn);
@


1.15
log
@-
@
text
@d31 1
a31 1
			map.debug_dump(linenr);
@


1.14
log
@-
@
text
@d21 1
d26 2
a27 1
		 if(caseF == true) word = word.toLowerCase();
d30 2
@


1.13
log
@-
@
text
@d25 1
a25 1
		 word.toLowerCase();
@


1.12
log
@-
@
text
@d25 1
@


1.11
log
@-
@
text
@d41 2
a42 2
			   case "-df" : caseD = true && caseF = true; break;
			   case "-fd" : caseF = true && caseD = true; break;
@


1.10
log
@-
@
text
@d9 2
a10 2
   boolean caseD = false;
   boolean caseF = false;
@


1.9
log
@-
@
text
@d9 2
d39 4
a42 4
			   case "-d"  : out.print("The D "); break;
			   case "-f"  : out.print("fuck "); break;
			   case "-df" : out.print("dfuck "); break;
			   case "-fd" : out.print("fduck "); break;
@


1.8
log
@-
@
text
@d41 1
a41 1
			   default    : throw new IllegalArgumentException (args[0])
@


1.7
log
@-
@
text
@d41 1
a41 1
			   default    : throw new IllegalArgumentException (args[0]); break;
@


1.6
log
@-
@
text
@d37 5
a41 5
			   case "-d"  : out.print("The D ") break;
			   case "-f"  : out.print("fuck ") break;
			   case "-df" : out.print("dfuck ") break;
			   case "-fd" : out.print("fduck ") break;
			   default    : throw new IllegalArgumentException (args[0]) break;
@


1.5
log
@-
@
text
@d37 5
a41 5
			   case "-d"  : out.print("The D ");
			   case "-f"  : out.print("fuck ");
			   case "-df" : out.print("dfuck ");
			   case "-fd" : out.print("fduck ");
			   //default    : throw new IllegalArgumentException (words[0]);
@


1.4
log
@-
@
text
@d37 4
a40 4
			   case "-d"  : out.print("The D");
			   case "-f"  : out.print("f");
			   case "-df" : out.print("df");
			   case "-fd" : out.print("fd");
@


1.3
log
@-
@
text
@d41 1
a41 1
			   default    : throw new IllegalArgumentException (words[0]);
@


1.2
log
@-
@
text
@d41 1
a41 1
			   default    : throw new IllegalArgumentException (words [0]);
@


1.1
log
@-
@
text
@d42 1
@
