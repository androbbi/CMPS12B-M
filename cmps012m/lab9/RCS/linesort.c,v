head	1.14;
access;
symbols;
locks;
comment	@ * @;


1.14
date	2014.03.19.17.37.48;	author -;	state -;
branches;
next	1.13;

1.13
date	2014.03.10.19.05.13;	author -;	state -;
branches;
next	1.12;

1.12
date	2014.03.10.19.00.35;	author -;	state -;
branches;
next	1.11;

1.11
date	2014.03.10.19.00.16;	author -;	state -;
branches;
next	1.10;

1.10
date	2014.03.10.18.56.17;	author -;	state -;
branches;
next	1.9;

1.9
date	2014.03.10.18.53.19;	author -;	state -;
branches;
next	1.8;

1.8
date	2014.03.10.18.52.48;	author -;	state -;
branches;
next	1.7;

1.7
date	2014.03.10.18.40.11;	author -;	state -;
branches;
next	1.6;

1.6
date	2014.03.10.18.38.10;	author -;	state -;
branches;
next	1.5;

1.5
date	2014.03.10.18.38.00;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.03.10.18.08.09;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.03.10.18.06.31;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.03.10.07.57.06;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.03.10.07.56.04;	author -;	state -;
branches;
next	;


desc
@@


1.14
log
@-
@
text
@//Antony Robbins androbbi@@ucsc.edu
//Brandon Gomez brlgomez@@ucsc.edu
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>

#include "inssort.h"

void print(char** sentence, int size){
   for(int i = 0; i < size; i++) {
      printf("%s\n", sentence[i]);
     free(sentence[i]);
   }
}


int strstrcmp (const void *this, const void *that) {
   char **thisstr = (char**) this;
   char **thatstr = (char**) that;
   return strcmp (*thisstr, *thatstr);
}

int main(void) {
   char buffer[1000];
   char *point[1000];
   int count = 0;
   for(;;){
      int in = scanf("%s", buffer); 
      if (in == EOF || count > 1000) break;
      else{
         point[count] = strdup(buffer);
       count++;
       //if(point[count] == '\0') point[count] = '\n';
      }
   }
   inssort (point, count, sizeof *point, strstrcmp);
   //qsort(point, count, sizeof *point, strstrcmp);
   print(point, count);
   return EXIT_SUCCESS;
}
@


1.13
log
@-
@
text
@d1 41
a41 39
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>

#include "inssort.h"

void print(char** sentence, int size){
   for(int i = 0; i < size; i++) {
      printf("%s\n", sentence[i]);
	  free(sentence[i]);
   }
}


int strstrcmp (const void *this, const void *that) {
   char **thisstr = (char**) this;
   char **thatstr = (char**) that;
   return strcmp (*thisstr, *thatstr);
}

int main(void) {
   char buffer[1000];
   char *point[1000];
   int count = 0;
   for(;;){
      int in = scanf("%s", buffer); 
      if (in == EOF || count > 1000) break;
      else{
         point[count] = strdup(buffer);
		 count++;
		 //if(point[count] == '\0') point[count] = '\n';
      }
   }
   inssort (point, count, sizeof *point, strstrcmp);
   //qsort(point, count, sizeof *point, strstrcmp);
   print(point, count);
   return EXIT_SUCCESS;
}@


1.12
log
@-
@
text
@d6 1
a6 1
//#include "inssort.h"
d35 2
a36 2
   //inssort (point, count, sizeof *point, strstrcmp);
   qsort(point, count, sizeof *point, strstrcmp);
@


1.11
log
@-
@
text
@d32 1
a32 1
		 if(point[count] == '\0') point[count] = '\n';
@


1.10
log
@-
@
text
@d24 1
a25 1
   char *point = fgets(buffer, sizeof buffer, stdin);
d27 1
@


1.9
log
@-
@
text
@a23 1
   char *point[1000];
d25 1
a26 1
      int in = scanf("%s", buffer); 
@


1.8
log
@-
@
text
@d32 1
a32 1
		 if(point[count-1] == '\0') point[count] = '\n';
@


1.7
log
@-
@
text
@d28 1
a28 1
      if (in == EOF || count == 1000) break;
d32 1
@


1.6
log
@-
@
text
@d11 1
@


1.5
log
@-
@
text
@d34 1
a34 1
   qsort(array, count, sizeof *point, strstrcmp);
@


1.4
log
@-
@
text
@d6 1
a6 1
#include "inssort.h"
d33 2
a34 1
   inssort (point, count, sizeof *point, strstrcmp);
@


1.3
log
@-
@
text
@d18 1
a18 1
   return cmp (*thisstr, *thatstr);
@


1.2
log
@-
@
text
@d15 1
a15 1
int cmp (const void *this, const void *that) {
d30 1
a31 1
      count++;
d33 1
a33 1
   inssort (point, count, sizeof(double), &cmp);
@


1.1
log
@-
@
text
@d33 1
a33 1
   inssort (point, count, sizeof buffer, &cmp);
@
