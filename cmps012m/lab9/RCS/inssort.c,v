head	1.6;
access;
symbols;
locks;
comment	@ * @;


1.6
date	2014.03.19.17.37.47;	author -;	state -;
branches;
next	1.5;

1.5
date	2014.03.10.19.05.13;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.03.10.18.06.31;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.03.10.07.26.51;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.03.10.07.24.29;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.03.10.07.15.05;	author -;	state -;
branches;
next	;


desc
@@


1.6
log
@-
@
text
@//Antony Robbins androbbi@@ucsc.edu
//Brandon Gomez brlgomez@@ucsc.edu
#include <stdlib.h>
#include <stddef.h>
#include <string.h>

#include "inssort.h"

void inssort( void *base, size_t nelem, size_t size,
         int (*compar) (const void *, const void *)){
   for(size_t i = 1; i < nelem; ++i){
      int slot = i;
     void* element = malloc(size);
     memcpy(element, (char*)(base + slot * size), size);
     
     for(; slot > 0; --slot){
        int compare = 0;
       compare = (*compar) (element, base + ((slot-1) *size));
       if(compare > 0) break;
       else{
          void *tmp = (char*) base + size * slot;
         memcpy(tmp,(char*) base + (slot -1) * size, size);
         }
      }
     memcpy((char*)(base + slot * size), element, size);
     free(element);
   }
}
@


1.5
log
@-
@
text
@d1 28
a28 26
#include <stdlib.h>
#include <stddef.h>
#include <string.h>

#include "inssort.h"

void inssort( void *base, size_t nelem, size_t size,
         int (*compar) (const void *, const void *)){
   for(size_t i = 1; i < nelem; ++i){
      int slot = i;
	  void* element = malloc(size);
	  memcpy(element, (char*)(base + slot * size), size);
	  
	  for(; slot > 0; --slot){
	     int compare = 0;
		 compare = (*compar) (element, base + ((slot-1) *size));
		 if(compare > 0) break;
		 else{
		    void *tmp = (char*) base + size * slot;
			memcpy(tmp,(char*) base + (slot -1) * size, size);
         }
      }
	  memcpy((char*)(base + slot * size), element, size);
	  free(element);
   }
}
@


1.4
log
@-
@
text
@d9 1
a9 1
   for(size_t i = 1; 1 < nelem; ++i){
@


1.3
log
@-
@
text
@d26 1
a26 1
}@


1.2
log
@-
@
text
@d14 1
a14 1
	  while(slot > 0){
a21 1
      slot--;
@


1.1
log
@-
@
text
@d1 27
@
