head	1.20;
access;
symbols;
locks;
comment	@ * @;


1.20
date	2014.02.20.09.36.02;	author -;	state -;
branches;
next	1.19;

1.19
date	2014.02.20.09.34.17;	author -;	state -;
branches;
next	1.18;

1.18
date	2014.02.20.09.33.18;	author -;	state -;
branches;
next	1.17;

1.17
date	2014.02.20.09.32.17;	author -;	state -;
branches;
next	1.16;

1.16
date	2014.02.20.09.31.33;	author -;	state -;
branches;
next	1.15;

1.15
date	2014.02.20.09.31.16;	author -;	state -;
branches;
next	1.14;

1.14
date	2014.02.20.09.30.34;	author -;	state -;
branches;
next	1.13;

1.13
date	2014.02.20.09.30.14;	author -;	state -;
branches;
next	1.12;

1.12
date	2014.02.20.09.30.03;	author -;	state -;
branches;
next	1.11;

1.11
date	2014.02.20.09.28.41;	author -;	state -;
branches;
next	1.10;

1.10
date	2014.02.20.09.27.35;	author -;	state -;
branches;
next	1.9;

1.9
date	2014.02.20.09.26.04;	author -;	state -;
branches;
next	1.8;

1.8
date	2014.02.20.09.25.44;	author -;	state -;
branches;
next	1.7;

1.7
date	2014.02.20.09.22.22;	author -;	state -;
branches;
next	1.6;

1.6
date	2014.02.20.09.21.51;	author -;	state -;
branches;
next	1.5;

1.5
date	2014.02.20.09.19.53;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.02.20.09.19.34;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.02.20.09.11.57;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.02.20.09.10.38;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.02.20.09.10.10;	author -;	state -;
branches;
next	;


desc
@@


1.20
log
@-
@
text
@// $Id: list3.c,v 1.1 2014-02-20 00:08:46-08 - - $

#include <assert.h>
#include <stdio.h>
#include <stdlib.h>

typedef struct node node;
struct node {
   char *word;
   node *link;
};

int main (int argc, char **argv) {
   node *head;
   for (int argi = 0; argi < 5; ++argi) {
      node *node = malloc (sizeof (struct node));
      assert (node != NULL);
      node->word = argv[argi];
      node->link = head;
      head = node;
   }
   for (node *curr = head; curr->link != NULL; curr = curr->link) {
      printf ("%p->node {word=%p->[%s], link=%p}\n",
              curr, curr->word, curr->word, curr->link);
      free(curr);
   }
   free(head);
   return 9;
}
@


1.19
log
@-
@
text
@d27 1
@


1.18
log
@-
@
text
@a26 1
   free(head);
@


1.17
log
@-
@
text
@a20 1
      free(head);
d27 1
@


1.16
log
@-
@
text
@d21 1
a21 1
      free(node);
@


1.15
log
@-
@
text
@d21 1
a21 1
	  free(node);
@


1.14
log
@-
@
text
@d21 1
d26 1
a27 1
   free(head);
@


1.13
log
@-
@
text
@d26 1
a26 1
   free(node);
@


1.12
log
@-
@
text
@d26 1
a26 1
   free(curr);
@


1.11
log
@-
@
text
@a24 1
      free(curr);
d26 1
@


1.10
log
@-
@
text
@d25 1
a25 1
      free(node);
@


1.9
log
@-
@
text
@a20 1
      free(node);
d25 1
@


1.8
log
@-
@
text
@d21 1
a21 1
      void free(void node);
@


1.7
log
@-
@
text
@d21 1
a21 1
      void free(void *node);
@


1.6
log
@-
@
text
@d21 1
a21 1
	  void free(void *node);
d24 1
a24 1
	  printf ("%p->node {word=%p->[%s], link=%p}\n",
@


1.5
log
@-
@
text
@d21 1
a23 1
   void free(void curr);
@


1.4
log
@-
@
text
@d23 1
a23 1
   void free(void *curr);
@


1.3
log
@-
@
text
@d23 2
a24 1
      printf ("%p->node {word=%p->[%s], link=%p}\n",
a25 1
      void free(void *curr);
@


1.2
log
@-
@
text
@a22 1
   void free(void *curr);
d25 1
@


1.1
log
@-
@
text
@d23 1
a23 1
   free(void *curr);
@
