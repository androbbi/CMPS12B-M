Script started on Wed Feb 19 21:16:19 2014
[?1034hbash-1$ mk list2.c
CSOURCE=list2.c EXECBIN=list2
+ cid + list2.c
+ checksource list2.c
+ gcc -g -O0 -Wall -Wextra -std=gnu99 list2.c -o list2 -lm
list2.c: In function 'main':
list2.c:13:15: warning: unused parameter 'argc' [-Wunused-parameter]
 int main (int argc, char **argv) {
               ^
+ set +x
============================================================
bash-2$ valgrind list2 foo bar
==27825== Memcheck, a memory error detector
==27825== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==27825== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==27825== Command: list2 foo bar
==27825== 
0x4c28180->node {word=0x7ff000239->[MANWIDTH=72], link=0x4c28130}
0x4c28130->node {word=(nil)->[(null)], link=0x4c280e0}
0x4c280e0->node {word=0x7ff000235->[bar], link=0x4c28090}
0x4c28090->node {word=0x7ff000231->[foo], link=0x4c28040}
==27825== Conditional jump or move depends on uninitialised value(s)
==27825==    at 0x400682: main (list2.c:22)
==27825== 
==27825== 
==27825== HEAP SUMMARY:
==27825==     in use at exit: 80 bytes in 5 blocks
==27825==   total heap usage: 5 allocs, 0 frees, 80 bytes allocated
==27825== 
==27825== LEAK SUMMARY:
==27825==    definitely lost: 16 bytes in 1 blocks
==27825==    indirectly lost: 64 bytes in 4 blocks
==27825==      possibly lost: 0 bytes in 0 blocks
==27825==    still reachable: 0 bytes in 0 blocks
==27825==         suppressed: 0 bytes in 0 blocks
==27825== Rerun with --leak-check=full to see details of leaked memory
==27825== 
==27825== For counts of detected and suppressed errors, rerun with: -v
==27825== Use --track-origins=yes to see where uninitialised values come from
==27825== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)
bash-3$ gdb list2
[?1034hGNU gdb (GDB) Red Hat Enterprise Linux (7.6-34.el6)
Copyright (C) 2013 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-redhat-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /afs/cats.ucsc.edu/users/k/androbbi/private/cmps012m/lab5/list2...done.
(gdb) break 26
Breakpoint 1 at 0x400684: file list2.c, line 26.
(gdb) run foo bar
Starting program: /afs/cats.ucsc.edu/users/k/androbbi/private/cmps012m/lab5/list2 foo bar
warning: Skipping deprecated .gdb_index section in /usr/lib/debug/lib64/ld-2.12.so.debug.
Do "set use-deprecated-index-sections on" before the file is read
to use the section anyway.
0x601090->node {word=0x7fffffffe2b3->[MANWIDTH=72], link=0x601070}
0x601070->node {word=(nil)->[(null)], link=0x601050}
0x601050->node {word=0x7fffffffe2af->[bar], link=0x601030}
0x601030->node {word=0x7fffffffe2ab->[foo], link=0x601010}

Breakpoint 1, main (argc=3, argv=0x7fffffffdf58) at list2.c:26
26	   return 9;
(gdb) where
#0  main (argc=3, argv=0x7fffffffdf58) at list2.c:26
(gdb) list
21	   }
22	   for (node *curr = head; curr->link != NULL; curr = curr->link) {
23	      printf ("%p->node {word=%p->[%s], link=%p}\n",
24	              curr, curr->word, curr->word, curr->link);
25	   }
26	   return 9;
27	}
(gdb) list list2.c:23
18	      node->word = argv[argi];
19	      node->link = head;
20	      head = node;
21	   }
22	   for (node *curr = head; curr->link != NULL; curr = curr->link) {
23	      printf ("%p->node {word=%p->[%s], link=%p}\n",
24	              curr, curr->word, curr->word, curr->link);
25	   }
26	   return 9;
27	}
(gdb) print head
$1 = (node *) 0x601090
(gdb) b print hea   *head
$2 = {word = 0x7fffffffe2b3 "MANWIDTH=72", link = 0x601070}
(gdb) print *(head->word)
$3 = 77 'M'
(gdb) print *(head->word)             head->link->link->link
$4 = (node *) 0x601030
(gdb) print *(head->link->link->link)
$5 = {word = 0x7fffffffe2ab "foo", link = 0x601010}
(gdb) exit
Undefined command: "exit".  Try "help".
(gdb) quit
A debugging session is active.

	Inferior 1 [process 27960] will be killed.

Quit anyway? (y or n) y
bash-4$ exit
exit

Script done on Wed Feb 19 21:35:16 2014
