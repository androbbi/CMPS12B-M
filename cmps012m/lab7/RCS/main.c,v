head	1.61;
access;
symbols;
locks;
comment	@ * @;


1.61
date	2014.02.28.04.28.01;	author -;	state -;
branches;
next	1.60;

1.60
date	2014.02.28.04.27.51;	author -;	state -;
branches;
next	1.59;

1.59
date	2014.02.28.04.26.51;	author -;	state -;
branches;
next	1.58;

1.58
date	2014.02.28.04.26.45;	author -;	state -;
branches;
next	1.57;

1.57
date	2014.02.28.04.19.09;	author -;	state -;
branches;
next	1.56;

1.56
date	2014.02.28.03.58.20;	author -;	state -;
branches;
next	1.55;

1.55
date	2014.02.28.03.56.21;	author -;	state -;
branches;
next	1.54;

1.54
date	2014.02.28.03.56.02;	author -;	state -;
branches;
next	1.53;

1.53
date	2014.02.28.03.54.45;	author -;	state -;
branches;
next	1.52;

1.52
date	2014.02.28.03.39.53;	author -;	state -;
branches;
next	1.51;

1.51
date	2014.02.28.03.38.06;	author -;	state -;
branches;
next	1.50;

1.50
date	2014.02.28.03.34.29;	author -;	state -;
branches;
next	1.49;

1.49
date	2014.02.28.03.33.17;	author -;	state -;
branches;
next	1.48;

1.48
date	2014.02.28.03.33.01;	author -;	state -;
branches;
next	1.47;

1.47
date	2014.02.28.01.28.48;	author -;	state -;
branches;
next	1.46;

1.46
date	2014.02.28.01.28.24;	author -;	state -;
branches;
next	1.45;

1.45
date	2014.02.28.01.18.14;	author -;	state -;
branches;
next	1.44;

1.44
date	2014.02.28.01.17.54;	author -;	state -;
branches;
next	1.43;

1.43
date	2014.02.28.00.15.58;	author -;	state -;
branches;
next	1.42;

1.42
date	2014.02.28.00.14.33;	author -;	state -;
branches;
next	1.41;

1.41
date	2014.02.28.00.13.19;	author -;	state -;
branches;
next	1.40;

1.40
date	2014.02.28.00.11.47;	author -;	state -;
branches;
next	1.39;

1.39
date	2014.02.28.00.11.20;	author -;	state -;
branches;
next	1.38;

1.38
date	2014.02.28.00.10.54;	author -;	state -;
branches;
next	1.37;

1.37
date	2014.02.28.00.10.08;	author -;	state -;
branches;
next	1.36;

1.36
date	2014.02.28.00.06.12;	author -;	state -;
branches;
next	1.35;

1.35
date	2014.02.28.00.06.02;	author -;	state -;
branches;
next	1.34;

1.34
date	2014.02.28.00.05.53;	author -;	state -;
branches;
next	1.33;

1.33
date	2014.02.28.00.05.36;	author -;	state -;
branches;
next	1.32;

1.32
date	2014.02.28.00.04.12;	author -;	state -;
branches;
next	1.31;

1.31
date	2014.02.28.00.03.32;	author -;	state -;
branches;
next	1.30;

1.30
date	2014.02.27.23.55.48;	author -;	state -;
branches;
next	1.29;

1.29
date	2014.02.27.23.55.37;	author -;	state -;
branches;
next	1.28;

1.28
date	2014.02.27.23.55.27;	author -;	state -;
branches;
next	1.27;

1.27
date	2014.02.27.23.55.14;	author -;	state -;
branches;
next	1.26;

1.26
date	2014.02.27.23.54.37;	author -;	state -;
branches;
next	1.25;

1.25
date	2014.02.27.23.47.43;	author -;	state -;
branches;
next	1.24;

1.24
date	2014.02.27.23.42.49;	author -;	state -;
branches;
next	1.23;

1.23
date	2014.02.27.23.40.36;	author -;	state -;
branches;
next	1.22;

1.22
date	2014.02.27.23.39.41;	author -;	state -;
branches;
next	1.21;

1.21
date	2014.02.27.22.57.14;	author -;	state -;
branches;
next	1.20;

1.20
date	2014.02.27.22.43.16;	author -;	state -;
branches;
next	1.19;

1.19
date	2014.02.27.22.39.31;	author -;	state -;
branches;
next	1.18;

1.18
date	2014.02.27.22.33.15;	author -;	state -;
branches;
next	1.17;

1.17
date	2014.02.27.22.32.46;	author -;	state -;
branches;
next	1.16;

1.16
date	2014.02.27.22.32.34;	author -;	state -;
branches;
next	1.15;

1.15
date	2014.02.27.22.31.06;	author -;	state -;
branches;
next	1.14;

1.14
date	2014.02.27.22.30.05;	author -;	state -;
branches;
next	1.13;

1.13
date	2014.02.27.22.09.00;	author -;	state -;
branches;
next	1.12;

1.12
date	2014.02.27.21.55.44;	author -;	state -;
branches;
next	1.11;

1.11
date	2014.02.27.21.54.53;	author -;	state -;
branches;
next	1.10;

1.10
date	2014.02.27.21.52.27;	author -;	state -;
branches;
next	1.9;

1.9
date	2014.02.27.21.19.40;	author -;	state -;
branches;
next	1.8;

1.8
date	2014.02.27.21.16.10;	author -;	state -;
branches;
next	1.7;

1.7
date	2014.02.27.06.51.20;	author -;	state -;
branches;
next	1.6;

1.6
date	2014.02.27.06.50.49;	author -;	state -;
branches;
next	1.5;

1.5
date	2014.02.27.06.10.27;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.02.27.06.09.40;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.02.27.06.09.31;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.02.27.04.03.45;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.02.27.03.55.30;	author -;	state -;
branches;
next	;


desc
@@


1.61
log
@-
@
text
@// $Id: main.c,v 1.57 2014-02-27 20:19:09-08 - - $

#include <assert.h>
#include <errno.h>
#include <libgen.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "queue.h"

char *execname = NULL;
int exit_status = EXIT_SUCCESS;

void putinqueue (queue *the_queue, FILE *input, char *filename) {
   char buffer[1024];
   for (int linenr = 1; ; ++linenr) {
      char *linepos = fgets (buffer, sizeof buffer, input);
      if (linepos == NULL) break;
      linepos = strchr (buffer, '\n');
      if (linepos == NULL) {
         fflush (NULL);
         fprintf (stderr, "%s: %s[%d]: unterminated line\n",
                  execname, filename, linenr);
         fflush (NULL);
         exit_status = EXIT_FAILURE;
      }else {
         *linepos = '\0';
      }
      linepos = strdup (buffer);
      assert (linepos != NULL);
      insert_queue (the_queue, linepos);
   }
}

void putfileinqueue (queue *the_queue, char *filename) {
   FILE *input = fopen (filename, "r");
   if (input == NULL) {
      fflush (NULL);
      fprintf (stderr, "%s: %s: %s\n",
               execname, filename, strerror (errno));
      fflush (NULL);
      exit_status = EXIT_FAILURE;
   }else {
      putinqueue (the_queue, input, filename);
      fclose (input);
   }
}


int main (int argc, char **argv) {
   execname = basename (argv[0]);
   queue *the_queue = new_queue();

   if (argc < 2) {
      putinqueue (the_queue, stdin, "-");
   }else {
      for (int argi = 1; argi < argc; ++argi) {
         if (strcmp (argv[argi], "-") == 0) {
            putinqueue (the_queue, stdin, "-");
         }else {
            putfileinqueue (the_queue, argv[argi]);
         }
      }
   }

   while(!isempty_queue (the_queue)){
      char *str = remove_queue(the_queue);
      printf("%s\n", str);
	  free(str);
   }
   free_queue (the_queue);
   return exit_status;
}
@


1.60
log
@-
@
text
@d68 1
a68 1
      char *str = remove_queue(the_queue));
@


1.59
log
@-
@
text
@d68 3
a70 2
      printf("%s\n", remove_queue (the_queue));
	  free(remove_queue(the_queue));
@


1.58
log
@-
@
text
@d1 73
@


1.57
log
@-
@
text
@a0 73
// $Id: main.c,v 1.10 2013-02-15 17:17:42-08 - - $

#include <assert.h>
#include <errno.h>
#include <libgen.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "queue.h"

char *execname = NULL;
int exit_status = EXIT_SUCCESS;

void putinqueue (queue *the_queue, FILE *input, char *filename) {
   char buffer[1024];
   for (int linenr = 1; ; ++linenr) {
      char *linepos = fgets (buffer, sizeof buffer, input);
      if (linepos == NULL) break;
      linepos = strchr (buffer, '\n');
      if (linepos == NULL) {
         fflush (NULL);
         fprintf (stderr, "%s: %s[%d]: unterminated line\n",
                  execname, filename, linenr);
         fflush (NULL);
         exit_status = EXIT_FAILURE;
      }else {
         *linepos = '\0';
      }
      linepos = strdup (buffer);
      assert (linepos != NULL);
      insert_queue (the_queue, linepos);
   }
}

void putfileinqueue (queue *the_queue, char *filename) {
   FILE *input = fopen (filename, "r");
   if (input == NULL) {
      fflush (NULL);
      fprintf (stderr, "%s: %s: %s\n",
               execname, filename, strerror (errno));
      fflush (NULL);
      exit_status = EXIT_FAILURE;
   }else {
      putinqueue (the_queue, input, filename);
      fclose (input);
   }
}


int main (int argc, char **argv) {
   execname = basename (argv[0]);
   queue *the_queue = new_queue();

   if (argc < 2) {
      putinqueue (the_queue, stdin, "-");
   }else {
      for (int argi = 1; argi < argc; ++argi) {
         if (strcmp (argv[argi], "-") == 0) {
            putinqueue (the_queue, stdin, "-");
         }else {
            putfileinqueue (the_queue, argv[argi]);
         }
      }
   }

   while(!isempty_queue (the_queue)){
      printf("%s\n", remove_queue (the_queue));
	  free(remove_queue(the_queue));
   }
   free_queue (the_queue);
   return exit_status;
}
@


1.56
log
@-
@
text
@d69 1
@


1.55
log
@-
@
text
@a68 3
	  free(the_queue.tmp->item);
	  free(the_queue.tmp);

@


1.54
log
@-
@
text
@d69 3
a71 1
	  free(the_queue.item);
@


1.53
log
@-
@
text
@d69 1
a69 2
	  free(the_queue->tmp->item);
	  free(the_queue->tmp);
@


1.52
log
@-
@
text
@d69 2
d72 1
a72 1
   //free_queue (the_queue);
@


1.51
log
@-
@
text
@d70 1
a70 1
   free_queue (the_queue);
@


1.50
log
@-
@
text
@d66 1
a66 7
   //printf("%p\n", the_queue);
   //int i = 0;
   //do{
      //printf ("%s\n", remove_queue (the_queue));
	  //printf("%d\n",i);
	  //i++;
   //}
a68 4
   // for (int i = 0; !isempty_queue (the_queue); i++) {
      // printf ("%s\n", remove_queue (the_queue));
	  // printf("%d",i);
   // } 
d70 1
a70 1
   //free_queue (the_queue);
@


1.49
log
@-
@
text
@d80 1
a80 3
   free(the_queue.front);
   front(the_queue.rear);
   free_queue (the_queue);
@


1.48
log
@-
@
text
@d80 2
a81 2
   free(the_queue->front);
   front(the_queue->rear);
@


1.47
log
@-
@
text
@d80 2
@


1.46
log
@-
@
text
@d79 1
a80 1
   }
@


1.45
log
@-
@
text
@d79 1
a79 1
   //free_queue (the_queue);
@


1.44
log
@-
@
text
@d73 1
a73 1
   while(!isempty_queue (the_queue));
@


1.43
log
@-
@
text
@d67 8
a74 6
   int i = 0;
   do{
      printf ("%s\n", remove_queue (the_queue));
	  printf("%d\n",i);
	  i++;
   }while(!isempty_queue (the_queue));
d80 1
a80 1

a82 1

@


1.42
log
@-
@
text
@d66 1
a66 1
   printf("%p\n", the_queue);
@


1.41
log
@-
@
text
@a69 1
	  printf("%s\n", the_queue->front);
@


1.40
log
@-
@
text
@d70 1
@


1.39
log
@-
@
text
@d70 1
a70 1
	  printf("%d",i);
@


1.38
log
@-
@
text
@d67 1
d71 1
@


1.37
log
@-
@
text
@d69 1
@


1.36
log
@-
@
text
@d67 1
a67 1
   for (int i = 0; !isempty_queue (the_queue); i++) {
d69 5
a73 2
	  printf("%d",i);
   } 
@


1.35
log
@-
@
text
@d69 1
a69 1
	  printf("%s",i);
@


1.34
log
@-
@
text
@d67 1
a67 1
   for (int i 0; !isempty_queue (the_queue); i++) {
@


1.33
log
@-
@
text
@d67 1
a67 1
   for (int i 0;!isempty_queue (the_queue);i++) {
@


1.32
log
@-
@
text
@d67 1
a67 1
   for (;!isempty_queue (the_queue);) {
d69 1
@


1.31
log
@-
@
text
@d67 1
a67 1
   if (!isempty_queue (the_queue)) {
@


1.30
log
@-
@
text
@d67 1
a67 1
   while (!isempty_queue (the_queue)) {
@


1.29
log
@-
@
text
@d66 1
a66 1
   printf("%s\n", the_queue);
@


1.28
log
@-
@
text
@d66 1
a66 1
   printf("%s\n", the_queue.item);
@


1.27
log
@-
@
text
@d66 1
a66 1
   printf("%s\n", the_queue.front.item);
@


1.26
log
@-
@
text
@d66 1
a66 1
   printf("%s\n", the_queue->front->item);
@


1.25
log
@-
@
text
@d66 1
a66 1
   //printf("%p\n", the_queue);
@


1.24
log
@-
@
text
@d66 1
a66 1
   printf("%p\n", the_queue);
@


1.23
log
@-
@
text
@d67 1
a67 1
   //while (!isempty_queue (the_queue)) {
d69 1
a69 1
   //} 
@


1.22
log
@-
@
text
@d70 1
a70 1
   free_queue (the_queue);
@


1.21
log
@-
@
text
@d67 1
a67 1
   while (!isempty_queue (the_queue)) {
d69 1
a69 1
   }
@


1.20
log
@-
@
text
@d50 1
a50 1

@


1.19
log
@-
@
text
@d66 1
a66 1
   printf("%p\n", the_queue->front);
@


1.18
log
@-
@
text
@d66 1
a66 1
   printf("%p", the_queue);
@


1.17
log
@-
@
text
@d66 1
a66 1
   printf("%s", the_queue->front);
@


1.16
log
@-
@
text
@d66 1
a66 1
   printf("%s", the_queue->item);
@


1.15
log
@-
@
text
@d66 1
a66 1
   printf("%p", the_queue);
@


1.14
log
@-
@
text
@d66 1
a66 1
   printf(the_queue);
@


1.13
log
@-
@
text
@d66 1
a66 1

@


1.12
log
@-
@
text
@a68 1
	  //free_queue (the_queue);
@


1.11
log
@-
@
text
@d69 1
a69 1
	  free_queue (the_queue);
@


1.10
log
@-
@
text
@d71 1
a71 1
   //free_queue (the_queue);
@


1.9
log
@-
@
text
@d69 1
d71 1
a71 1
   free_queue (the_queue);
@


1.8
log
@-
@
text
@d70 1
a70 1
   //free_queue (the_queue);
@


1.7
log
@-
@
text
@d70 1
a70 1
   free_queue (the_queue);
@


1.6
log
@-
@
text
@a68 1
	  //free_queue (the_queue);
d70 1
@


1.5
log
@-
@
text
@d67 1
a67 1
   while (! isempty_queue (the_queue)) {
d69 1
a69 1
	  free_queue (the_queue);
@


1.4
log
@-
@
text
@d69 1
a69 1
	  void free_queue (the_queue);
@


1.3
log
@-
@
text
@d69 1
a69 1
	  void free_queue (the_queue)
@


1.2
log
@-
@
text
@d69 1
@


1.1
log
@-
@
text
@d1 1
a1 7
// $Id: main.c,v 1.11 2014-02-13 18:38:23-08 - - $

//
// Silly main program which just creates an cbox box, puts a
// number in it, gets it back out, and deletes the box.
// Run with bcheck to verify no memory leaks.
//
d3 1
a8 2
#include <sys/time.h>
#include <time.h>
d10 1
a10 1
#include "cbox.h"
d13 36
d50 1
a51 1
   (void) argc; // warning: unused parameter 'argc'
d53 1
d55 15
a69 11
   // Declare the box and initialize it.
   cbox *box = new_cbox();
   printf ("box = %p\n", box);

   // Perform a couple of operations on it.
   put_cbox (box, 1024);
   printf ("box value is %d\n", get_cbox (box));

   // Free up the box and set the handle to NULL to avoid a dangle.
   free_cbox (box);
   box = NULL;
d71 1
a71 1
   return EXIT_SUCCESS;
@
