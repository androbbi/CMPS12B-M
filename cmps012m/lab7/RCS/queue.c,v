head	1.131;
access;
symbols;
locks;
comment	@ * @;


1.131
date	2014.02.28.04.19.09;	author -;	state -;
branches;
next	1.130;

1.130
date	2014.02.28.04.11.59;	author -;	state -;
branches;
next	1.129;

1.129
date	2014.02.28.04.10.17;	author -;	state -;
branches;
next	1.128;

1.128
date	2014.02.28.04.09.20;	author -;	state -;
branches;
next	1.127;

1.127
date	2014.02.28.04.05.06;	author -;	state -;
branches;
next	1.126;

1.126
date	2014.02.28.03.58.54;	author -;	state -;
branches;
next	1.125;

1.125
date	2014.02.28.03.58.20;	author -;	state -;
branches;
next	1.124;

1.124
date	2014.02.28.03.39.21;	author -;	state -;
branches;
next	1.123;

1.123
date	2014.02.28.03.38.06;	author -;	state -;
branches;
next	1.122;

1.122
date	2014.02.28.03.29.54;	author -;	state -;
branches;
next	1.121;

1.121
date	2014.02.28.03.29.42;	author -;	state -;
branches;
next	1.120;

1.120
date	2014.02.28.01.23.09;	author -;	state -;
branches;
next	1.119;

1.119
date	2014.02.28.01.18.15;	author -;	state -;
branches;
next	1.118;

1.118
date	2014.02.28.00.18.09;	author -;	state -;
branches;
next	1.117;

1.117
date	2014.02.28.00.17.30;	author -;	state -;
branches;
next	1.116;

1.116
date	2014.02.28.00.15.58;	author -;	state -;
branches;
next	1.115;

1.115
date	2014.02.28.00.14.57;	author -;	state -;
branches;
next	1.114;

1.114
date	2014.02.28.00.14.33;	author -;	state -;
branches;
next	1.113;

1.113
date	2014.02.28.00.02.06;	author -;	state -;
branches;
next	1.112;

1.112
date	2014.02.28.00.01.39;	author -;	state -;
branches;
next	1.111;

1.111
date	2014.02.28.00.00.33;	author -;	state -;
branches;
next	1.110;

1.110
date	2014.02.27.23.59.30;	author -;	state -;
branches;
next	1.109;

1.109
date	2014.02.27.23.58.45;	author -;	state -;
branches;
next	1.108;

1.108
date	2014.02.27.23.57.43;	author -;	state -;
branches;
next	1.107;

1.107
date	2014.02.27.23.56.20;	author -;	state -;
branches;
next	1.106;

1.106
date	2014.02.27.23.53.25;	author -;	state -;
branches;
next	1.105;

1.105
date	2014.02.27.23.53.15;	author -;	state -;
branches;
next	1.104;

1.104
date	2014.02.27.23.52.12;	author -;	state -;
branches;
next	1.103;

1.103
date	2014.02.27.23.51.40;	author -;	state -;
branches;
next	1.102;

1.102
date	2014.02.27.23.50.54;	author -;	state -;
branches;
next	1.101;

1.101
date	2014.02.27.23.49.42;	author -;	state -;
branches;
next	1.100;

1.100
date	2014.02.27.23.49.05;	author -;	state -;
branches;
next	1.99;

1.99
date	2014.02.27.23.48.34;	author -;	state -;
branches;
next	1.98;

1.98
date	2014.02.27.23.47.43;	author -;	state -;
branches;
next	1.97;

1.97
date	2014.02.27.23.46.58;	author -;	state -;
branches;
next	1.96;

1.96
date	2014.02.27.23.46.42;	author -;	state -;
branches;
next	1.95;

1.95
date	2014.02.27.23.45.59;	author -;	state -;
branches;
next	1.94;

1.94
date	2014.02.27.23.45.47;	author -;	state -;
branches;
next	1.93;

1.93
date	2014.02.27.23.45.34;	author -;	state -;
branches;
next	1.92;

1.92
date	2014.02.27.23.44.43;	author -;	state -;
branches;
next	1.91;

1.91
date	2014.02.27.23.31.21;	author -;	state -;
branches;
next	1.90;

1.90
date	2014.02.27.23.05.24;	author -;	state -;
branches;
next	1.89;

1.89
date	2014.02.27.23.05.06;	author -;	state -;
branches;
next	1.88;

1.88
date	2014.02.27.23.04.50;	author -;	state -;
branches;
next	1.87;

1.87
date	2014.02.27.22.54.27;	author -;	state -;
branches;
next	1.86;

1.86
date	2014.02.27.22.51.34;	author -;	state -;
branches;
next	1.85;

1.85
date	2014.02.27.22.51.08;	author -;	state -;
branches;
next	1.84;

1.84
date	2014.02.27.22.50.30;	author -;	state -;
branches;
next	1.83;

1.83
date	2014.02.27.22.50.07;	author -;	state -;
branches;
next	1.82;

1.82
date	2014.02.27.22.47.56;	author -;	state -;
branches;
next	1.81;

1.81
date	2014.02.27.22.47.19;	author -;	state -;
branches;
next	1.80;

1.80
date	2014.02.27.22.46.04;	author -;	state -;
branches;
next	1.79;

1.79
date	2014.02.27.22.45.47;	author -;	state -;
branches;
next	1.78;

1.78
date	2014.02.27.22.45.36;	author -;	state -;
branches;
next	1.77;

1.77
date	2014.02.27.22.43.16;	author -;	state -;
branches;
next	1.76;

1.76
date	2014.02.27.22.37.16;	author -;	state -;
branches;
next	1.75;

1.75
date	2014.02.27.22.37.06;	author -;	state -;
branches;
next	1.74;

1.74
date	2014.02.27.22.36.32;	author -;	state -;
branches;
next	1.73;

1.73
date	2014.02.27.22.36.05;	author -;	state -;
branches;
next	1.72;

1.72
date	2014.02.27.22.27.03;	author -;	state -;
branches;
next	1.71;

1.71
date	2014.02.27.22.25.28;	author -;	state -;
branches;
next	1.70;

1.70
date	2014.02.27.22.23.43;	author -;	state -;
branches;
next	1.69;

1.69
date	2014.02.27.22.22.37;	author -;	state -;
branches;
next	1.68;

1.68
date	2014.02.27.22.22.12;	author -;	state -;
branches;
next	1.67;

1.67
date	2014.02.27.22.20.16;	author -;	state -;
branches;
next	1.66;

1.66
date	2014.02.27.22.18.55;	author -;	state -;
branches;
next	1.65;

1.65
date	2014.02.27.22.18.20;	author -;	state -;
branches;
next	1.64;

1.64
date	2014.02.27.22.17.33;	author -;	state -;
branches;
next	1.63;

1.63
date	2014.02.27.22.16.39;	author -;	state -;
branches;
next	1.62;

1.62
date	2014.02.27.22.16.22;	author -;	state -;
branches;
next	1.61;

1.61
date	2014.02.27.22.11.51;	author -;	state -;
branches;
next	1.60;

1.60
date	2014.02.27.22.11.39;	author -;	state -;
branches;
next	1.59;

1.59
date	2014.02.27.22.11.21;	author -;	state -;
branches;
next	1.58;

1.58
date	2014.02.27.22.08.17;	author -;	state -;
branches;
next	1.57;

1.57
date	2014.02.27.22.07.10;	author -;	state -;
branches;
next	1.56;

1.56
date	2014.02.27.22.06.45;	author -;	state -;
branches;
next	1.55;

1.55
date	2014.02.27.22.05.29;	author -;	state -;
branches;
next	1.54;

1.54
date	2014.02.27.22.05.16;	author -;	state -;
branches;
next	1.53;

1.53
date	2014.02.27.22.04.52;	author -;	state -;
branches;
next	1.52;

1.52
date	2014.02.27.22.03.25;	author -;	state -;
branches;
next	1.51;

1.51
date	2014.02.27.22.01.13;	author -;	state -;
branches;
next	1.50;

1.50
date	2014.02.27.22.00.31;	author -;	state -;
branches;
next	1.49;

1.49
date	2014.02.27.22.00.16;	author -;	state -;
branches;
next	1.48;

1.48
date	2014.02.27.21.59.53;	author -;	state -;
branches;
next	1.47;

1.47
date	2014.02.27.21.59.07;	author -;	state -;
branches;
next	1.46;

1.46
date	2014.02.27.21.58.47;	author -;	state -;
branches;
next	1.45;

1.45
date	2014.02.27.21.57.59;	author -;	state -;
branches;
next	1.44;

1.44
date	2014.02.27.21.57.35;	author -;	state -;
branches;
next	1.43;

1.43
date	2014.02.27.21.57.14;	author -;	state -;
branches;
next	1.42;

1.42
date	2014.02.27.21.57.01;	author -;	state -;
branches;
next	1.41;

1.41
date	2014.02.27.21.42.12;	author -;	state -;
branches;
next	1.40;

1.40
date	2014.02.27.21.36.54;	author -;	state -;
branches;
next	1.39;

1.39
date	2014.02.27.21.23.24;	author -;	state -;
branches;
next	1.38;

1.38
date	2014.02.27.21.20.12;	author -;	state -;
branches;
next	1.37;

1.37
date	2014.02.27.21.19.40;	author -;	state -;
branches;
next	1.36;

1.36
date	2014.02.27.21.14.41;	author -;	state -;
branches;
next	1.35;

1.35
date	2014.02.27.21.14.10;	author -;	state -;
branches;
next	1.34;

1.34
date	2014.02.27.07.04.40;	author -;	state -;
branches;
next	1.33;

1.33
date	2014.02.27.07.01.30;	author -;	state -;
branches;
next	1.32;

1.32
date	2014.02.27.07.01.08;	author -;	state -;
branches;
next	1.31;

1.31
date	2014.02.27.06.53.20;	author -;	state -;
branches;
next	1.30;

1.30
date	2014.02.27.06.52.50;	author -;	state -;
branches;
next	1.29;

1.29
date	2014.02.27.06.50.49;	author -;	state -;
branches;
next	1.28;

1.28
date	2014.02.27.06.48.50;	author -;	state -;
branches;
next	1.27;

1.27
date	2014.02.27.06.48.18;	author -;	state -;
branches;
next	1.26;

1.26
date	2014.02.27.06.47.37;	author -;	state -;
branches;
next	1.25;

1.25
date	2014.02.27.06.45.47;	author -;	state -;
branches;
next	1.24;

1.24
date	2014.02.27.06.44.44;	author -;	state -;
branches;
next	1.23;

1.23
date	2014.02.27.06.43.39;	author -;	state -;
branches;
next	1.22;

1.22
date	2014.02.27.06.40.45;	author -;	state -;
branches;
next	1.21;

1.21
date	2014.02.27.06.40.28;	author -;	state -;
branches;
next	1.20;

1.20
date	2014.02.27.06.38.55;	author -;	state -;
branches;
next	1.19;

1.19
date	2014.02.27.06.37.38;	author -;	state -;
branches;
next	1.18;

1.18
date	2014.02.27.06.33.58;	author -;	state -;
branches;
next	1.17;

1.17
date	2014.02.27.06.33.03;	author -;	state -;
branches;
next	1.16;

1.16
date	2014.02.27.06.31.21;	author -;	state -;
branches;
next	1.15;

1.15
date	2014.02.27.06.31.04;	author -;	state -;
branches;
next	1.14;

1.14
date	2014.02.27.06.29.23;	author -;	state -;
branches;
next	1.13;

1.13
date	2014.02.27.06.28.40;	author -;	state -;
branches;
next	1.12;

1.12
date	2014.02.27.06.21.06;	author -;	state -;
branches;
next	1.11;

1.11
date	2014.02.27.06.20.43;	author -;	state -;
branches;
next	1.10;

1.10
date	2014.02.27.06.19.07;	author -;	state -;
branches;
next	1.9;

1.9
date	2014.02.27.06.18.24;	author -;	state -;
branches;
next	1.8;

1.8
date	2014.02.27.06.18.10;	author -;	state -;
branches;
next	1.7;

1.7
date	2014.02.27.06.16.28;	author -;	state -;
branches;
next	1.6;

1.6
date	2014.02.27.06.03.04;	author -;	state -;
branches;
next	1.5;

1.5
date	2014.02.27.06.02.37;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.02.27.06.01.19;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.02.27.06.00.28;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.02.27.05.59.38;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.02.27.04.03.45;	author -;	state -;
branches;
next	;


desc
@@


1.131
log
@-
@
text
@// $Id: queue.c,v 1.9 2013-05-01 13:22:44-07 - - $

#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "queue.h"

typedef struct queue_node queue_node;
struct queue_node {
   queue_item_t item;
   queue_node *link;
};

struct queue {
   queue_node *front;
   queue_node *rear;
};


queue *new_queue (void) {
   queue *nqueue = malloc(sizeof(struct queue));
   assert (nqueue != NULL);
   nqueue->front = NULL;
   nqueue->rear = NULL;
   return nqueue;
}

void free_queue (queue *this) {
   assert (isempty_queue (this));
   free (this);
}

void insert_queue (queue *this, queue_item_t item) {
   queue_node *tmp = malloc(sizeof(struct queue_node));
   tmp->item = item;
   assert(tmp != NULL);
   if(isempty_queue(this)) {
	  this->front = tmp;
	  this->rear = this->front;
	  tmp->link = NULL;
   }
   else{
      this->rear->link = tmp;
	  this->rear = tmp;
	  tmp->link = NULL;
   }
}

queue_item_t remove_queue (queue *this) {
   assert (! isempty_queue (this));
   queue_node *point = this->front;
   this->front = this->front->link;
   queue_item_t string = point->item;
   free(point);
   return string;
}

bool isempty_queue (queue *this) {
   return this->front == NULL;
}

@


1.130
log
@-
@
text
@a56 1
   //free(point->item);
@


1.129
log
@-
@
text
@d55 1
a55 1
   char *string = point->item;
d57 1
a57 1
   free(point->item);
@


1.128
log
@-
@
text
@d55 1
a55 1
   queue_item_t string = point->item;
@


1.127
log
@-
@
text
@d54 1
d56 1
a56 1
   this->front = this->front->link;
a57 1
   free(point);
@


1.126
log
@-
@
text
@d21 1
d53 2
a54 2
   queue_node *tmp = this->front;
   queue_item_t string = tmp->item;
d56 2
@


1.125
log
@-
@
text
@a30 1
   printf("%s\n", this->front->item);
@


1.124
log
@-
@
text
@a25 1
   //printf("%p\n", nqueue);
d31 1
a55 1
   //free(tmp);
@


1.123
log
@-
@
text
@d56 1
a56 1
   free(tmp);
@


1.122
log
@-
@
text
@a48 1
   //printf("front: %s tmp: %s rear: %s\n", this->front->item, tmp->item, this->rear->item);   
a51 1
   //printf("front: %s rear: %s\n", this->front->item, this->rear->item);   
@


1.121
log
@-
@
text
@d47 2
a48 4
	  tmp->link = NULL
   }  
   
   
@


1.120
log
@-
@
text
@d42 1
d47 1
d49 2
@


1.119
log
@-
@
text
@d47 1
a47 1
   printf("front: %s tmp: %s rear: %s\n", this->front->item, tmp->item, this->rear->item);   
d51 1
a51 1
   printf("front: %s rear: %s\n", this->front->item, this->rear->item);   
@


1.118
log
@-
@
text
@d25 1
@


1.117
log
@-
@
text
@a55 3
   if(isempty_queue (this)){
      free(this);
   }
@


1.116
log
@-
@
text
@d56 3
@


1.115
log
@-
@
text
@d25 1
a25 1
   printf("%p\n", nqueue);
a54 1
   printf("newfront: %s\n", this->front->item);
@


1.114
log
@-
@
text
@d55 1
a55 1
   printf("newfront: %s", this->front->item);
@


1.113
log
@-
@
text
@d55 1
@


1.112
log
@-
@
text
@d50 1
a54 1
   printf("front: %s rear: %s\n", this->front->item, this->rear->item);   
@


1.111
log
@-
@
text
@d54 1
a54 1
   printf("front: %s tmp: %s rear: %s\n", this->front->item, tmp->item, this->rear->item);   
@


1.110
log
@-
@
text
@d54 1
@


1.109
log
@-
@
text
@d46 1
a46 1
   printf("front: %s front.link: %s rear: %s\n", this->front->item, this->front->link->item, this->rear->item);   
@


1.108
log
@-
@
text
@d46 1
a46 1
   printf("front: %s tmp: %s rear: %s\n", this->front->item, tmp->item, this->rear->item);   
@


1.107
log
@-
@
text
@d46 1
a46 1
   printf("front: %s rear: %s\n", this->front->item, this->rear->item);   
@


1.106
log
@-
@
text
@d25 1
a25 1
   printf("%p", nqueue);
@


1.105
log
@-
@
text
@d25 1
a25 1
   print("%p", nqueue);
@


1.104
log
@-
@
text
@d25 1
@


1.103
log
@-
@
text
@d45 1
a45 1
   printf("%s front: %srear:\n", this->front->item, this->rear->item);   
@


1.102
log
@-
@
text
@d45 1
a45 1
   printf("%s%s\n", this->front->item, this->rear->item);   
@


1.101
log
@-
@
text
@d45 1
a45 1
   printf("%s", this->rear->item);   
@


1.100
log
@-
@
text
@d45 1
a45 1
   printf("%s", rear->item);   
@


1.99
log
@-
@
text
@d45 1
a45 1
   printf("%s", tmp->item);   
@


1.98
log
@-
@
text
@d45 1
a45 1
   printf("%s", item);   
@


1.97
log
@-
@
text
@d45 1
a45 1
   printf("%p", item);   
@


1.96
log
@-
@
text
@d45 1
a45 1
   printf("%p", this->item);   
@


1.95
log
@-
@
text
@d45 1
a45 1
   printf("%p", this->rear);   
@


1.94
log
@-
@
text
@d45 1
a45 1
   printf("%s", this->rear);   
@


1.93
log
@-
@
text
@d45 1
a45 1
   printf("%s", rear);   
@


1.92
log
@-
@
text
@a37 1
      printf("hi");
d44 2
a45 1
   }     
@


1.91
log
@-
@
text
@d38 1
@


1.90
log
@-
@
text
@d22 1
a22 1
   queue *nqueue = malloc(1);
@


1.89
log
@-
@
text
@d22 1
a22 1
   queue *nqueue = malloc(sizeof(struct queue));
@


1.88
log
@-
@
text
@d24 1
a24 1
   //nqueue->front = NULL;
@


1.87
log
@-
@
text
@d24 1
a24 1
   nqueue->front = NULL;
@


1.86
log
@-
@
text
@d50 1
a50 1
   queue_item_t string = this->front->item;
@


1.85
log
@-
@
text
@d49 1
a49 1
   //queue_node *tmp = this->front;
d52 1
a52 1
   free(this->front);
@


1.84
log
@-
@
text
@d52 1
a52 1
   //free(tmp);
@


1.83
log
@-
@
text
@d49 1
a49 1
   queue_node *tmp = this->front;
@


1.82
log
@-
@
text
@d52 1
a52 1
   free(tmp);
@


1.81
log
@-
@
text
@d22 1
a22 1
   queue *nqueue = malloc(0);
@


1.80
log
@-
@
text
@d22 1
a22 1
   queue *nqueue = NULL;
d24 1
a24 1
   //nqueue->front = NULL;
@


1.79
log
@-
@
text
@d22 1
a22 1
   queue *nqueue;
@


1.78
log
@-
@
text
@d24 1
a24 1
   nqueue->front = NULL;
@


1.77
log
@-
@
text
@d22 1
a22 1
   queue *nqueue = NULL;
@


1.76
log
@-
@
text
@d22 1
a22 1
   queue *nqueue = malloc(sizeof(struct queue));
@


1.75
log
@-
@
text
@d22 1
a22 1
   queue *nqueue = malloc(0(struct queue));
@


1.74
log
@-
@
text
@d22 1
a22 1
   queue *nqueue = malloc(sizeof(struct queue));
@


1.73
log
@-
@
text
@d22 3
a24 3
   queue *nqueue = (0);
   //assert (nqueue != NULL);
   //nqueue->front = NULL;
@


1.72
log
@-
@
text
@d22 3
a24 3
   queue *nqueue = malloc(sizeof(struct queue));
   assert (nqueue != NULL);
   nqueue->front = NULL;
@


1.71
log
@-
@
text
@a52 3
   if(isempty_queue(this)){
      free_queue(this);
   }
@


1.70
log
@-
@
text
@d52 4
a55 1
   free_queue(tmp);
@


1.69
log
@-
@
text
@d52 1
a52 1
   free(tmp);
@


1.68
log
@-
@
text
@d22 1
a22 1
   queue *nqueue = malloc(sizeof(0));
@


1.67
log
@-
@
text
@d22 1
a22 1
   queue *nqueue = malloc(sizeof(struct queue));
@


1.66
log
@-
@
text
@d49 1
a49 1
   //queue_node *tmp = this->front;
d52 1
a52 1
   //free(tmp);
@


1.65
log
@-
@
text
@a50 1
   free(this->front);
d52 1
a52 1
   
@


1.64
log
@-
@
text
@d51 1
d53 1
a53 1
   free(this->front);
@


1.63
log
@-
@
text
@d52 1
a52 1
   //free(tmp);
@


1.62
log
@-
@
text
@d50 1
a50 1
   queue_item_t string = this->item;
@


1.61
log
@-
@
text
@d49 2
a50 1
   queue_node *tmp = this->front;
d52 1
a52 2
   queue_item_t string = tmp->item;
   free(tmp);
@


1.60
log
@-
@
text
@d53 1
a53 1
   return string->item;
@


1.59
log
@-
@
text
@d51 1
a51 1
   queue_item-t string = tmp->item;
@


1.58
log
@-
@
text
@d51 1
a51 1
   queue_node *string = tmp;
@


1.57
log
@-
@
text
@d51 1
a51 1
   //queue_item_t *string = tmp->item;
d53 1
a53 1
   return tmp->item;
@


1.56
log
@-
@
text
@d52 1
a52 1
   //free(tmp);
@


1.55
log
@-
@
text
@d51 3
a53 3
   queue_node *string = tmp;
   free(tmp);
   return string->item;
@


1.54
log
@-
@
text
@d53 1
a53 1
   return string;
@


1.53
log
@-
@
text
@d51 1
a51 1
   queue_item_t *string = tmp;
@


1.52
log
@-
@
text
@d51 1
a51 1
   queue_node *string = tmp->item;
d53 1
a53 1
   return string->item;
@


1.51
log
@-
@
text
@d51 1
a51 1
   //queue_item_t *string = tmp->item;
d53 1
a53 1
   return tmp->item;
@


1.50
log
@-
@
text
@d51 1
a51 1
   queue_item_t *string = tmp->item;
d53 1
a53 1
   return string;
@


1.49
log
@-
@
text
@d51 1
a51 1
   queue_item_t *string = this->item;
@


1.48
log
@-
@
text
@d51 1
a51 1
   queue_item_t *string = tmp->item;
@


1.47
log
@-
@
text
@d51 1
a51 1
   queue_node *string = tmp->item;
@


1.46
log
@-
@
text
@a50 1
   tmp->item = item;
@


1.45
log
@-
@
text
@d51 1
@


1.44
log
@-
@
text
@d51 1
a51 1
   queue_item_t *string = tmp->item;
d53 1
a53 1
   return *string;
@


1.43
log
@-
@
text
@d53 1
a53 1
   return string;
@


1.42
log
@-
@
text
@d53 1
a53 1
   return ;
@


1.41
log
@-
@
text
@d51 3
a53 3
   //queue_item_t *string = tmp->item;
   //free(tmp);
   return tmp->item;
@


1.40
log
@-
@
text
@d51 3
a53 3
   queue_item_t *string = tmp->item;
   free(tmp);
   return string;
@


1.39
log
@-
@
text
@d49 1
a49 2
   queue_node *tmp = malloc(sizeof(struct queue_node));
   tmp->item = this->front->item;
d51 3
a53 1
   return tmp->item;
@


1.38
log
@-
@
text
@d49 2
a50 1
   char *print = this->front->item;
d52 1
a52 1
   return print;
@


1.37
log
@-
@
text
@d49 1
a49 1
   char *print = this->front;
@


1.36
log
@-
@
text
@d49 1
a49 1
   queue_node *tmp = this->front;
d51 1
a51 1
   return tmp->item;
@


1.35
log
@-
@
text
@d34 1
a34 2
   //queue_node *tmp = malloc(sizeof(struct queue_node));
   queue_node *tmp = NULL;
@


1.34
log
@-
@
text
@a9 2
#define STUBPRINTF(...) fprintf (stderr, __VA_ARGS__);

d34 2
a35 1
   queue_node *tmp = malloc(sizeof(struct queue_node));
@


1.33
log
@-
@
text
@d26 1
a26 1
   isempty_queue(nqueue);
@


1.32
log
@-
@
text
@d26 1
a26 1
   isempty_queue();
@


1.31
log
@-
@
text
@d26 1
@


1.30
log
@-
@
text
@d30 1
a30 1
   assert (! isempty_queue (this));
d49 1
a49 1
   assert (isempty_queue (this));
@


1.29
log
@-
@
text
@d49 1
a49 1
   assert (! isempty_queue (this));
@


1.28
log
@-
@
text
@a44 1
	  printf("something happens here\n");
@


1.27
log
@-
@
text
@d45 1
@


1.26
log
@-
@
text
@d51 1
a51 1
   this->front->link = this->front;
@


1.25
log
@-
@
text
@d51 1
a51 1
   this->front = this->front->link;
@


1.24
log
@-
@
text
@a25 1
   printf("Made a queue\n");
a40 1
	  printf("Setting something to head\n");
a44 1
	  printf("adding to the queue\n");
@


1.23
log
@-
@
text
@d41 1
a41 1
	  this->front = this->rear;
@


1.22
log
@-
@
text
@d45 2
a46 2
      queue_node *tmp = malloc(sizeof(struct queue_node));
      tmp->item = item;
@


1.21
log
@-
@
text
@d26 1
a26 1
   printf("Made a queue");
@


1.20
log
@-
@
text
@d26 1
a26 1
   //printf("Made a queue");
a39 1
   //printf("Setting something to head");
d42 1
a44 1
   printf("adding to the queue");
d47 1
@


1.19
log
@-
@
text
@a40 1
      tmp->item = item;
@


1.18
log
@-
@
text
@a40 1
      queue_node *tmp = malloc(sizeof(struct queue_node));
d42 2
@


1.17
log
@-
@
text
@d26 1
a26 1
   printf("Made a queue");
d40 1
a40 1
   printf("Setting something to head");
@


1.16
log
@-
@
text
@d39 1
a39 1
   if(this == NULL) {
@


1.15
log
@-
@
text
@d40 1
a40 1
   printf("Setting something to head";
@


1.14
log
@-
@
text
@d26 1
d36 3
a38 3
   //queue_node *tmp = malloc(sizeof(struct queue_node));
   //tmp->item = item;
   //assert(tmp != NULL);
d40 1
a42 3
      assert(tmp != NULL);
	  this->front = tmp;
	  this->rear = this->front;
d45 1
a47 3
      assert(tmp != NULL);
      this->rear->link = tmp;
	  this->rear = tmp;
@


1.13
log
@-
@
text
@d35 3
a37 3
   queue_node *tmp = malloc(sizeof(struct queue_node));
   tmp->item = item;
   assert(tmp != NULL);
@


1.12
log
@-
@
text
@d39 3
d46 3
@


1.11
log
@-
@
text
@d25 1
a25 1
   assert (!isempty_queue (nqueue));
@


1.10
log
@-
@
text
@d25 1
a25 1
   assert (isempty_queue (nqueue));
@


1.9
log
@-
@
text
@d25 1
a25 1
   assert (! isempty_queue (nqueue));
@


1.8
log
@-
@
text
@d25 1
a25 1
   assert (! isempty_queue (this));
@


1.7
log
@-
@
text
@d25 1
a25 1
   //assert (nqueue != NULL);
d30 1
a30 1
   assert (isempty_queue (this));
@


1.6
log
@-
@
text
@d25 1
a25 1
   assert (nqueue != NULL);
@


1.5
log
@-
@
text
@d51 1
a51 1
   this->front = front->link;
@


1.4
log
@-
@
text
@d40 1
a40 1
	  this->rear = front;
d43 2
a44 2
      rear->link = tmp;
	  rear = tmp;
d50 3
a52 3
   queue_node *tmp = front;
   front = front->link;
   return tmp;
@


1.3
log
@-
@
text
@d39 2
a40 2
	  front = tmp;
	  rear = front;
@


1.2
log
@-
@
text
@d25 1
a25 1
   assert (tmp != NULL);
@


1.1
log
@-
@
text
@d24 3
a26 2
   STUBPRINTF ("return NULL\n");
   return NULL;
d35 11
a45 1
   STUBPRINTF ("item =\n\t\"%s\"\n", item);
d50 3
a52 2
   STUBPRINTF ("return NULL\n");
   return NULL;
@
